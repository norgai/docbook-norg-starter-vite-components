Task: You are an expert UI designer with a knack for identifying the components that make up a page.
Refactor and cleanup the code so that all markup is stored inside reusable components within /src/components/
Page Structure Requirements:

/src/pages/ should contain the main page logic and directly call components - NO intermediate wrapper components
Pages should use <main> tags that directly contain component calls (e.g., <Navbar />, <HeroBanner />, etc.)
Pages may contain logic to pass props to components, useEffect hooks, and page-specific functionality
The <main> tag should only contain React component calls - no divs, sections, or other HTML elements

Component Structure Requirements:

All markup (divs, sections, headers, etc.) must live inside /src/components/
Components should be reusable and self-contained
<section> tags should all live in components, never in pages
Ensure components are organized logically in the /src/components/ directory

What to Avoid:

Do NOT create wrapper components that just contain other components (like IndexPage.tsx wrapping other components)
Do NOT have pages that call a single large component - break it down into individual section components
Do NOT put any HTML markup directly in pages

Example Structure:
typescript// ✅ Good: pages/Index.tsx
return (
  <main>
    <Navbar />
    <HeroBanner />
    <AssuranceStrip />
    <CareOptions />
  </main>
);

// ❌ Bad: pages/Index.tsx  
return (
  <main>
    <IndexPage />  // This creates unnecessary nesting
  </main>
);
Requirements:

Don't be lazy - clean up ALL pages until markup is properly moved to components
Ensure all pages follow this direct component calling pattern
Fix all pages in the codebase

Remove any un-used imports from the page.